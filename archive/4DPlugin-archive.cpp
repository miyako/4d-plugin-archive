/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-archive.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : archive
 #	author : miyako
 #	2021/04/29
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-archive.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- archive
            
			case 1 :
				archive_read(params);
				break;
			case 2 :
				archive_write(params);
				break;
            case 3 :
                archive_version(params);
                break;

        }

	}
	catch(...)
	{

	}
}

void archive_version(PA_PluginParameters params) {
    
    PA_ObjectRef o = PA_CreateObject();
    
    ob_set_s(o, L"zstd", archive_libzstd_version());
    ob_set_s(o, L"bz", archive_bzlib_version());
    ob_set_s(o, L"lzma", archive_liblzma_version());
    ob_set_s(o, L"z", archive_zlib_version());
    ob_set_s(o, L"archive", archive_version_string());
    ob_set_s(o, L"lz4", archive_liblz4_version());
    
    PA_ReturnObject(params, o);
}

#pragma mark -

typedef enum {
    
    archive_format_CPIO_P = ARCHIVE_FORMAT_CPIO_POSIX,
    archive_format_CPIO_L = ARCHIVE_FORMAT_CPIO_BIN_LE,
    archive_format_CPIO_B = ARCHIVE_FORMAT_CPIO_BIN_BE,
    archive_format_CPIO_N = ARCHIVE_FORMAT_CPIO_SVR4_NOCRC,
    archive_format_CPIO_C = ARCHIVE_FORMAT_CPIO_SVR4_CRC,
    archive_format_CPIO_A = ARCHIVE_FORMAT_CPIO_AFIO_LARGE,
    
    archive_format_SHAR_B = ARCHIVE_FORMAT_SHAR_BASE,
    archive_format_SHAR_D = ARCHIVE_FORMAT_SHAR_DUMP,
    
    archive_format_TAR_U  = ARCHIVE_FORMAT_TAR_USTAR,
    archive_format_TAR_I  = ARCHIVE_FORMAT_TAR_PAX_INTERCHANGE,
    archive_format_TAR_R  = ARCHIVE_FORMAT_TAR_PAX_RESTRICTED,
    archive_format_TAR_G  = ARCHIVE_FORMAT_TAR_GNUTAR,
    
    archive_format_ISO    = ARCHIVE_FORMAT_ISO9660_ROCKRIDGE,
    archive_format_ZIP    = ARCHIVE_FORMAT_ZIP,
    archive_format_EMPTY  = ARCHIVE_FORMAT_EMPTY,
    
    archive_format_AR_G   = ARCHIVE_FORMAT_AR_GNU,
    archive_format_AR_B   = ARCHIVE_FORMAT_AR_BSD,
    
    archive_format_MTREE  = ARCHIVE_FORMAT_MTREE,
    archive_format_RAW    = ARCHIVE_FORMAT_RAW,
    archive_format_XAR    = ARCHIVE_FORMAT_XAR,
    archive_format_LHA    = ARCHIVE_FORMAT_LHA,
    archive_format_CAB    = ARCHIVE_FORMAT_CAB,
    archive_format_7ZIP   = ARCHIVE_FORMAT_7ZIP,
    archive_format_WARC   = ARCHIVE_FORMAT_WARC,
    archive_format_RAR    = ARCHIVE_FORMAT_RAR,
    archive_format_RAR5   = ARCHIVE_FORMAT_RAR_V5
    
}archive_format_t;

void archive_read(PA_PluginParameters params) {

    int r;
    //ssize_t size;

    struct archive *a = archive_read_new();
    
    archive_read_support_format_all(a); // raw not enabled
    archive_read_support_format_raw(a); //empty not enabled
    archive_read_support_format_empty(a);
    
    archive_read_free(a);
}

void archive_write(PA_PluginParameters params) {

}

